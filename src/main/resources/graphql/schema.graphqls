type Query {
    "all currently know pets"
    pets:[Pet]
    petsByKind(kind: PetKind!): [Pet]
    pet(name: String!): Pet
    petSearch(input: PetSearchInput!): [Pet]
    fastFood: [FastFood]
}


# New mutation field
type Mutation {
    changePetName(id: ID!, newName: String!): ChangePetNamePayload
}
# New type
type ChangePetNamePayload {
    pet: Pet
}
input PetSearchInput {
    namePattern: String
    ownerPattern: String
}


"""
A pet can be a Dog or Cat
A Pet has a human owner
"""

enum PetKind{
    CAT
    DOG
    BIRD
}

scalar Date @specifiedBy(url:
"https://scalars.graphql.org/andimarek/local-date")


type Pet {
    id: ID
    name: String
    color: String
    owner: Person
    dateOfBirth: Date
}
type Person {
    id: ID
    firstName: String
    lastName: String
}

interface Food{
    name: String
}
type Burger implements Food{
    name: String
    fatness: Boolean
}
type Pizza implements Food{
    name: String
    isContainPineApples: Boolean
}
union FastFood = Burger | Pizza
